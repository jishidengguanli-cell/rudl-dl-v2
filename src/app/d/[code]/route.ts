import { getRequestContext } from '@cloudflare/next-on-pages';
import { fetchDistributionByCode } from '@/lib/distribution';

export const runtime = 'edge';

type Env = {
  DB?: D1Database;
  ['rudl-app']?: D1Database;
};

const DEFAULT_APP_TITLE = 'App';

export async function GET(
  request: Request,
  context: { params: Promise<{ code: string }> }
) {
  const { env } = getRequestContext();
  const bindings = env as Env;
  const DB = bindings.DB ?? bindings['rudl-app'];
  if (!DB) {
    return new Response('Missing D1 binding DB', {
      status: 500,
      headers: { 'cache-control': 'no-store' },
    });
  }

  const params = await context.params;
  const code = String(params?.code ?? '').trim();
  if (!code) return resp404('Invalid code');

  const link = await fetchDistributionByCode(DB, code);
  if (!link || !link.isActive) return resp404('Not Found');

  const files = link.files ?? [];
  const findByPlatform = (platform: string) =>
    files.find(
      (file) => file.r2Key && (file.platform ?? '').toLowerCase() === platform
    ) ?? null;

  const apkFile = findByPlatform('apk');
  const ipaFile = findByPlatform('ipa');

  const hasApk = Boolean(apkFile);
  const hasIpa = Boolean(ipaFile);

  const displayTitle =
    link.title ?? ipaFile?.title ?? apkFile?.title ?? DEFAULT_APP_TITLE;
  const displayBundleId =
    link.bundleId ?? ipaFile?.bundleId ?? apkFile?.bundleId ?? '';

  const androidVersion = apkFile?.version ?? link.apkVersion ?? '';
  const iosVersion = ipaFile?.version ?? link.ipaVersion ?? '';

  const androidSizeValue = typeof apkFile?.size === 'number' ? apkFile.size : null;
  const iosSizeValue = typeof ipaFile?.size === 'number' ? ipaFile.size : null;

  const iosBundleId = ipaFile?.bundleId ?? link.bundleId ?? '';

  const missing: string[] = [];
  if (hasIpa) {
    if (!iosVersion) missing.push('Version');
    if (!iosBundleId) missing.push('Bundle ID');
  }
  const missMsg = missing.length
    ? `Missing metadata: ${missing.join(', ')}`
    : '';
  const disableIos = !hasIpa || missing.length > 0;

  const url = new URL(request.url);
  const qlang = normLang(url.searchParams.get('lang'));
  const reqLang = pickBestLang(qlang, request.headers.get('accept-language'));
  const t = (key: string) =>
    LOCALES[reqLang]?.[key] ?? LOCALES['zh-TW'][key] ?? key;
  const switcher = renderLangSwitcher(link.code, reqLang);

  const hrefApk = hasApk ? `/dl/${encodeURIComponent(link.code)}?p=apk` : '';
  const manifestUrl = `${url.origin}/m/${encodeURIComponent(link.code)}`;
  const hrefIos = hasIpa
    ? `itms-services://?action=download-manifest&url=${encodeURIComponent(
        manifestUrl
      )}`
    : '';

  const developerName =
    ipaFile?.bundleId ??
    link.bundleId ??
    displayTitle ??
    t('enterpriseDev');

  const buildVersionMarkup = () => {
    const segments: string[] = [];
    if (hasApk) {
      segments.push(
        `<div>${h(t('androidApk'))}: ${h(formatVersionValue(androidVersion))}</div>`
      );
    }
    if (hasIpa) {
      segments.push(
        `<div>${h(t('iosIpa'))}: ${h(formatVersionValue(iosVersion))}</div>`
      );
    }
    return segments.length ? segments.join('') : `<span class="muted">-</span>`;
  };

  const buildSizeMarkup = () => {
    const segments: string[] = [];
    if (hasApk) {
      segments.push(
        `<div>${h(t('androidApk'))}: ${h(formatFileSize(androidSizeValue))}</div>`
      );
    }
    if (hasIpa) {
      segments.push(
        `<div>${h(t('iosIpa'))}: ${h(formatFileSize(iosSizeValue))}</div>`
      );
    }
    return segments.length ? segments.join('') : `<span class="muted">-</span>`;
  };

  const versionMarkup = buildVersionMarkup();
  const sizeMarkup = buildSizeMarkup();

  const nowYear = new Date().getFullYear();
  const accountId = link.ownerId ?? '';
  const dataAttributes = accountId
    ? `data-account="${attr(accountId)}" data-link="${attr(link.id)}"`
    : `data-link="${attr(link.id)}"`;

  const html = `<!doctype html>
<html lang="${attr(htmlLang(reqLang))}">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title>${h(displayTitle)} - ${h(t('download'))}</title>
  <meta name="robots" content="noindex,nofollow"/>
  <style>
    body{margin:0;background:#0f172a;color:#e5e7eb;font:16px/1.6 system-ui,-apple-system,Segoe UI,Roboto,sans-serif}
    header{background:#0b1222;border-bottom:1px solid #1f2937}
    .wrap{max-width:880px;margin:0 auto;padding:16px}
    a{color:#93c5fd;text-decoration:none}
    .card{background:#111827;border:1px solid #1f2937;border-radius:16px;padding:22px;margin-top:22px}
    .muted{color:#9ca3af}
    .row{display:flex;gap:14px;flex-wrap:wrap}
    .btn{padding:12px 16px;border-radius:12px;border:0;background:#3b82f6;color:#fff;cursor:pointer}
    .btn.secondary{background:#334155}
    .btn.ghost{background:#1e293b}
    .btn.red{background:#ef4444}
    .meta{display:grid;grid-template-columns:140px 1fr;gap:6px 10px;margin-top:8px}
    code,kbd{background:#0b1222;border:1px solid #334155;border-radius:8px;padding:2px 6px}
    .hero{display:flex;align-items:center;justify-content:space-between;gap:12px}
    .hero h1{margin:0;font-size:22px}
    .btns{display:flex;gap:10px;margin-top:16px;flex-wrap:wrap}
    .tip{margin-top:10px;font-size:14px;color:#9ca3af}
    .footer{color:#9ca3af;text-align:center;margin:18px 0}
    .lang{display:flex;align-items:center;gap:8px}
    .lang select{padding:.4rem .6rem;border-radius:10px;background:#0b1222;border:1px solid #334155;color:#e5e7eb}

    .guide-mask{position:fixed;inset:0;background:rgba(0,0,0,.55);display:none;z-index:9999}
    .guide{position:fixed;left:50%;top:50%;transform:translate(-50%,-50%);
      width:min(540px,92vw);background:#0b1220;color:#e5e7eb;border:1px solid #1f2937;border-radius:14px;
      box-shadow:0 10px 30px rgba(0,0,0,.4);padding:18px;z-index:10000}
    .guide h3{margin:0 0 8px}
    .guide .muted{color:#9ca3af}
    .guide .steps{margin:10px 0 0 18px}
    .guide .row{display:flex;gap:8px;margin-top:10px;flex-wrap:wrap}
    .guide .btn{padding:10px 12px;border-radius:10px;border:0;background:#3b82f6;color:#fff;font-size:14px}
    .guide .btn.ghost{background:#1e293b}
    .guide .btn.red{background:#ef4444}
  </style>
</head>
<body>
  <header>
    <div class="wrap">
      <div class="lang">${switcher}</div>
    </div>
  </header>
  <main class="wrap">
    <section class="card">
      <div class="hero">
        <div>
          <h1>${h(displayTitle)}</h1>
          <div class="muted">${h(code)}</div>
        </div>
      </div>

      <div class="meta">
        <div class="muted">Bundle ID</div><div>${h(displayBundleId || '-')}</div>
        <div class="muted">${h(t('versionLabel'))}</div><div>${versionMarkup}</div>
        <div class="muted">${h(t('sizeLabel'))}</div><div>${sizeMarkup}</div>
      </div>

      <div class="btns">
        ${
          hasApk
            ? `<a class="btn" href="${attr(hrefApk)}" id="btn-android" data-platform="apk" ${dataAttributes}>${h(
                t('androidDownload')
              )}</a>`
            : ''
        }
        ${
          hasIpa
            ? `<a class="btn" href="${
                attr(disableIos ? '#' : hrefIos)
              }" id="btn-ios" data-platform="ipa" ${dataAttributes} data-dev="${attr(
                developerName
              )}" data-missing="${attr(missMsg)}" ${
                disableIos ? 'aria-disabled="true"' : ''
              }>${h(t('iosInstall'))}</a>`
            : ''
        }
        ${
          !hasApk && !hasIpa
            ? `<span class="muted">${h(t('noFiles'))}</span>`
            : ''
        }
      </div>

      <div class="tip">${h(t('tip'))}</div>
    </section>
    <div class="footer">Â© ${nowYear} RU Download</div>
  </main>

  <div class="guide-mask" id="iosGuideMask"></div>
  <div class="guide" id="iosGuide" style="display:none" role="dialog" aria-modal="true" aria-labelledby="iosGuideTitle">
    <h3 id="iosGuideTitle">${h(t('iosGuideTitle'))}</h3>
    <div class="muted" id="iosPath">${h(t('iosGuideDetecting'))}</div>
    <ol class="steps" id="iosSteps">
      <li>${h(t('step1'))}</li>
      <li>${h(t('step2'))}</li>
      <li>${h(t('step3a'))} <b><span id="devName">${h(developerName)}</span></b> ${h(t('step3b'))}</li>
      <li>${h(t('step4'))}</li>
    </ol>

    <div class="row">
      <button class="btn ghost" id="btnCopyDev" type="button">${h(t('copyDev'))}</button>
      <button class="btn" id="btnOpenApp" type="button" data-scheme="">${h(t('tryOpenApp'))}</button>
      <button class="btn red" id="btnCloseGuide" type="button">${h(t('close'))}</button>
    </div>
    <div class="footer">
      <span class="muted">${h(t('trustOnce'))}</span>
    </div>
  </div>

  <script>
  (function(){
    var installBtn = document.getElementById('btn-ios');
    var androidBtn = document.getElementById('btn-android');
    var code = (location.pathname.split('/').pop() || '').trim();

    function getBillingPayload(btn, platform){
      if (!btn) return null;
      var linkId = btn.getAttribute('data-link') || '';
      var accountId = btn.getAttribute('data-account') || '';
      if (!linkId || !accountId) return null;
      return JSON.stringify({ account_id: accountId, link_id: linkId, platform: platform });
    }

    if (installBtn) {
      var devName = installBtn.getAttribute('data-dev') || (window.__DEV_NAME__ || '${h(
        developerName
      )}');
      var devEl = document.getElementById('devName'); if (devEl) devEl.textContent = devName;

      var schemeFromGlobal = (window.__APP_SCHEME__ || '');
      var openBtn = document.getElementById('btnOpenApp');
      if (schemeFromGlobal) openBtn.setAttribute('data-scheme', schemeFromGlobal);
      if (!openBtn.getAttribute('data-scheme')) openBtn.style.display = 'none';

      var mask  = document.getElementById('iosGuideMask');
      var guide = document.getElementById('iosGuide');

      function isiOS(){ return /iP(hone|od|ad)/.test(navigator.userAgent); }
      function isSafari(){
        var ua = navigator.userAgent;
        return /Safari/i.test(ua) && !/CriOS|FxiOS|EdgiOS|OPiOS|DuckDuckGo/i.test(ua);
      }
      function iOSMajor(){ var m = navigator.userAgent.match(/OS (\\d+)_/i); return m ? parseInt(m[1],10) : null; }
      function setPath(){
        var v = iOSMajor() || 17;
        var path;
        if (v >= 16) path = '${h(t('path16'))}';
        else if (v >= 14) path = '${h(t('path14'))}';
        else path = '${h(t('pathOld'))}';
        document.getElementById('iosPath').innerHTML = '${h(t('detected'))} ' + v + '<br/>' + path;
      }
      function showGuide(){ setPath(); guide.style.display='block'; mask.style.display='block'; }
      function hideGuide(){ guide.style.display='none'; mask.style.display='none'; }

      document.getElementById('btnCopyDev').addEventListener('click', function(){ try { navigator.clipboard.writeText(devName); } catch(e){} });
      openBtn && openBtn.addEventListener('click', function(){ var s=openBtn.getAttribute('data-scheme')||''; if(s) location.href=s; });
      document.getElementById('btnCloseGuide').addEventListener('click', hideGuide);
      mask.addEventListener('click', hideGuide);

      var miss = installBtn && installBtn.getAttribute('data-missing');
      if (miss) {
        installBtn.addEventListener('click', function(e){
          e.preventDefault();
          alert(miss);
        });
      } else {
        installBtn.addEventListener('click', function(){
          if (!isiOS()) return;
          if (!isSafari()) {
            alert('Please use Safari to install this iOS app.');
          }
          var payload = getBillingPayload(installBtn, 'ipa');
          if (payload) {
            try {
              if (navigator.sendBeacon) {
                navigator.sendBeacon('/api/dl/bill', new Blob([payload], { type: 'application/json' }));
              } else {
                fetch('/api/dl/bill', {
                  method: 'POST',
                  headers: { 'content-type': 'application/json' },
                  body: payload,
                  credentials: 'include'
                }).catch(function(){});
              }
            } catch (_) {}
          }
          setTimeout(showGuide, 600);
        });
      }
    }

    if (androidBtn) {
      androidBtn.addEventListener('click', async function(e){
        e.preventDefault();
        var href = androidBtn.getAttribute('href');
        if (!href) return;
        var payload = getBillingPayload(androidBtn, 'apk');
        if (!payload) {
          location.href = href;
          return;
        }
        androidBtn.disabled = true; var ori = androidBtn.textContent; androidBtn.textContent = '...';
        try{
          const res = await fetch('/api/dl/bill', {
            method: 'POST',
            headers: { 'content-type': 'application/json' },
            body: payload,
            credentials: 'include'
          });
          if (res.ok) {
            location.href = href;
            return;
          }
          if (res.status === 402) {
            alert('Insufficient points. Please recharge.');
          } else {
            alert('Download check failed. Please retry later.');
          }
        } catch(_){
          alert('Network error. Please retry later.');
        } finally {
          androidBtn.disabled = false;
          androidBtn.textContent = ori;
        }
      });
    }
  })();
  </script>
</body>
</html>`;

  return new Response(html, {
    status: 200,
    headers: {
      'content-type': 'text/html; charset=utf-8',
      'cache-control': 'no-store',
    },
  });
}

function formatVersionValue(value: string | null | undefined): string {
  const trimmed = typeof value === 'string' ? value.trim() : '';
  return trimmed || '-';
}

function formatFileSize(size: number | null | undefined): string {
  if (typeof size !== 'number' || !Number.isFinite(size) || size <= 0) return '-';
  const KB = 1024;
  const MB = KB * 1024;
  const GB = MB * 1024;
  if (size >= GB) return `${(size / GB).toFixed(1)} GB`;
  if (size >= MB) return `${(size / MB).toFixed(1)} MB`;
  if (size >= KB) return `${(size / KB).toFixed(1)} KB`;
  return `${size} B`;
}

const LOCALES: Record<string, Record<string, string>> = {
  'zh-TW': {
    download: 'ä¸è¼',
    version: 'çæ¬',
    versionLabel: 'çæ¬',
    sizeLabel: 'æªæ¡å¤§å°',
    platform: 'å¹³å°',
    androidApk: 'Android',
    androidNone: 'Androidï¼ç¡ï¼',
    iosIpa: 'iOS',
    iosNone: 'iOSï¼ç¡ï¼',
    androidDownload: 'Android ä¸è¼',
    iosInstall: 'iOS å®è£',
    noFiles: 'å°æªä¸å³å¯ä¾ä¸è¼çæªæ¡ã',
    tip: 'æéï¼ç¬¬ä¸æ¬¡å®è£ä¼æ¥­ Appï¼è«è³ãè¨­å®ãâãä¸è¬ãâãVPN èè£ç½®ç®¡ç / æè¿°æªèè£ç½®ç®¡çãä¿¡ä»»éç¼èã',
    iosGuideTitle: 'ä¸ä¸æ­¥ï¼åç¨ä¼æ¥­ App',
    iosGuideDetecting: 'æ­£å¨åµæ¸¬ iOS çæ¬â¦',
    step1: 'å®è£å®æå¾ï¼æ«æä¸è¦éå Appã',
    step2: 'éåãè¨­å®ãâãä¸è¬ãâãVPN èè£ç½®ç®¡ç / æè¿°æªèè£ç½®ç®¡çãã',
    step3a: 'å¨ãéç¼è Appãä¸­é¸æ',
    step3b: 'ä¸¦é»æãä¿¡ä»»ãâãç¢ºèªãã',
    step4: 'è¿åä¸»ç«é¢ä¸¦éå Appã',
    copyDev: 'è¤è£½éç¼èåç¨±',
    tryOpenApp: 'åè©¦éå App',
    close: 'éé',
    trustOnce: 'ï¼åªéä¿¡ä»»ä¸æ¬¡å³å¯ã',
    enterpriseDev: 'ä¼æ¥­éç¼è',
    path16: 'è¨­å® â ä¸è¬ â VPN èè£ç½®ç®¡ç â éç¼è App â ä¿¡ä»»',
    path14: 'è¨­å® â ä¸è¬ â æè¿°æªèè£ç½®ç®¡ç â éç¼è App â ä¿¡ä»»',
    pathOld: 'è¨­å® â ä¸è¬ â è£ç½®ç®¡ç / æè¿°æª â éç¼è App â ä¿¡ä»»',
    detected: 'åµæ¸¬å° iOS',
    language: 'èªè¨',
  },
  en: {
    download: 'Download',
    version: 'Version',
    versionLabel: 'Version',
    sizeLabel: 'File Size',
    platform: 'Platform',
    androidApk: 'Android',
    androidNone: 'Android (none)',
    iosIpa: 'iOS',
    iosNone: 'iOS (none)',
    androidDownload: 'Download for Android',
    iosInstall: 'Install on iOS',
    noFiles: 'No downloadable files uploaded yet.',
    tip: 'Tip: For the first enterprise app install, go to Settings â General â VPN & Device Management / Profiles & Device Management to trust the developer.',
    iosGuideTitle: 'Next step: Enable the enterprise app',
    iosGuideDetecting: 'Detecting iOS versionâ¦',
    step1: 'After installation, do not open the app immediately.',
    step2: 'Open Settings â General â VPN & Device Management / Profiles & Device Management.',
    step3a: 'Under âDeveloper Appâ, select',
    step3b: 'then tap âTrustâ â âVerifyâ.',
    step4: 'Return to the home screen and launch the app.',
    copyDev: 'Copy developer name',
    tryOpenApp: 'Try opening the app',
    close: 'Close',
    trustOnce: '*You only need to trust this developer once.',
    enterpriseDev: 'Enterprise Developer',
    path16: 'Settings â General â VPN & Device Management â Developer App â Trust',
    path14: 'Settings â General â Profiles & Device Management â Developer App â Trust',
    pathOld: 'Settings â General â Device Management / Profiles â Developer App â Trust',
    detected: 'Detected iOS',
    language: 'Language',
  },
  'zh-CN': {
    download: 'ä¸è½½',
    version: 'çæ¬',
    versionLabel: 'çæ¬',
    sizeLabel: 'æä»¶å¤§å°',
    platform: 'å¹³å°',
    androidApk: 'Android',
    androidNone: 'Androidï¼æ ï¼',
    iosIpa: 'iOS',
    iosNone: 'iOSï¼æ ï¼',
    androidDownload: 'Android ä¸è½½',
    iosInstall: 'iOS å®è£',
    noFiles: 'å°æªä¸ä¼ å¯ä¸è½½çæä»¶ã',
    tip: 'æç¤ºï¼é¦æ¬¡å®è£ä¼ä¸ Appï¼è¯·åå¾âè®¾ç½®âââéç¨âââVPN ä¸è®¾å¤ç®¡ç / æè¿°æä»¶ä¸è®¾å¤ç®¡çâä¿¡ä»»å¼åèã',
    iosGuideTitle: 'ä¸ä¸æ­¥ï¼å¯ç¨ä¼ä¸ App',
    iosGuideDetecting: 'æ­£å¨æ£æµ iOS çæ¬â¦',
    step1: 'å®è£å®æåï¼è¯·åä¸è¦æå¼ Appã',
    step2: 'æå¼âè®¾ç½®âââéç¨âââVPN ä¸è®¾å¤ç®¡ç / æè¿°æä»¶ä¸è®¾å¤ç®¡çâã',
    step3a: 'å¨âå¼åè Appâä¸­éæ©',
    step3b: 'å¹¶ç¹å»âä¿¡ä»»âââç¡®è®¤âã',
    step4: 'è¿åä¸»å±å¹å¹¶æå¼ Appã',
    copyDev: 'å¤å¶å¼åèåç§°',
    tryOpenApp: 'å°è¯æå¼ App',
    close: 'å³é­',
    trustOnce: 'ï¼åªéä¿¡ä»»ä¸æ¬¡å³å¯ã',
    enterpriseDev: 'ä¼ä¸å¼åè',
    path16: 'è®¾ç½® â éç¨ â VPN ä¸è®¾å¤ç®¡ç â å¼åè App â ä¿¡ä»»',
    path14: 'è®¾ç½® â éç¨ â æè¿°æä»¶ä¸è®¾å¤ç®¡ç â å¼åè App â ä¿¡ä»»',
    pathOld: 'è®¾ç½® â éç¨ â è®¾å¤ç®¡ç / æè¿°æä»¶ â å¼åè App â ä¿¡ä»»',
    detected: 'æ£æµå° iOS',
    language: 'è¯­è¨',
  },
  ru: {
    download: 'Ð¡ÐºÐ°ÑÐ°ÑÑ',
    version: 'ÐÐµÑÑÐ¸Ñ',
    versionLabel: 'ÐÐµÑÑÐ¸Ñ',
    sizeLabel: 'Ð Ð°Ð·Ð¼ÐµÑ ÑÐ°Ð¹Ð»Ð°',
    platform: 'ÐÐ»Ð°ÑÑÐ¾ÑÐ¼Ð°',
    androidApk: 'Android',
    androidNone: 'Android (Ð½ÐµÑ)',
    iosIpa: 'iOS',
    iosNone: 'iOS (Ð½ÐµÑ)',
    androidDownload: 'Ð¡ÐºÐ°ÑÐ°ÑÑ Ð´Ð»Ñ Android',
    iosInstall: 'Ð£ÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÑ Ð½Ð° iOS',
    noFiles: 'Ð¤Ð°Ð¹Ð»Ñ Ð´Ð»Ñ ÑÐºÐ°ÑÐ¸Ð²Ð°Ð½Ð¸Ñ ÐµÑÑ Ð½Ðµ Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½Ñ.',
    tip: 'Ð¡Ð¾Ð²ÐµÑ: Ð¿ÑÐ¸ Ð¿ÐµÑÐ²Ð¾Ð¹ ÑÑÑÐ°Ð½Ð¾Ð²ÐºÐµ ÐºÐ¾ÑÐ¿Ð¾ÑÐ°ÑÐ¸Ð²Ð½Ð¾Ð³Ð¾ Ð¿ÑÐ¸Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ Ð¾ÑÐºÑÐ¾Ð¹ÑÐµ ÐÐ°ÑÑÑÐ¾Ð¹ÐºÐ¸ â ÐÑÐ½Ð¾Ð²Ð½ÑÐµ â VPN Ð¸ ÑÐ¿ÑÐ°Ð²Ð»ÐµÐ½Ð¸Ðµ ÑÑÑÑÐ¾Ð¹ÑÑÐ²Ð¾Ð¼ / ÐÑÐ¾ÑÐ¸Ð»Ð¸ Ð¸ ÑÐ¿ÑÐ°Ð²Ð»ÐµÐ½Ð¸Ðµ ÑÑÑÑÐ¾Ð¹ÑÑÐ²Ð¾Ð¼ Ð¸ Ð¿Ð¾Ð´ÑÐ²ÐµÑÐ´Ð¸ÑÐµ ÑÐ°Ð·ÑÐ°Ð±Ð¾ÑÑÐ¸ÐºÐ°.',
    iosGuideTitle: 'Ð¡Ð»ÐµÐ´ÑÑÑÐ¸Ð¹ ÑÐ°Ð³: Ð°ÐºÑÐ¸Ð²Ð¸ÑÑÐ¹ÑÐµ ÐºÐ¾ÑÐ¿Ð¾ÑÐ°ÑÐ¸Ð²Ð½Ð¾Ðµ Ð¿ÑÐ¸Ð»Ð¾Ð¶ÐµÐ½Ð¸Ðµ',
    iosGuideDetecting: 'ÐÐ¿ÑÐµÐ´ÐµÐ»ÑÐµÐ¼ Ð²ÐµÑÑÐ¸Ñ iOSâ¦',
    step1: 'ÐÐ¾ÑÐ»Ðµ ÑÑÑÐ°Ð½Ð¾Ð²ÐºÐ¸ Ð½Ðµ Ð·Ð°Ð¿ÑÑÐºÐ°Ð¹ÑÐµ Ð¿ÑÐ¸Ð»Ð¾Ð¶ÐµÐ½Ð¸Ðµ ÑÑÐ°Ð·Ñ.',
    step2: 'ÐÑÐºÑÐ¾Ð¹ÑÐµ ÐÐ°ÑÑÑÐ¾Ð¹ÐºÐ¸ â ÐÑÐ½Ð¾Ð²Ð½ÑÐµ â VPN Ð¸ ÑÐ¿ÑÐ°Ð²Ð»ÐµÐ½Ð¸Ðµ ÑÑÑÑÐ¾Ð¹ÑÑÐ²Ð¾Ð¼ / ÐÑÐ¾ÑÐ¸Ð»Ð¸ Ð¸ ÑÐ¿ÑÐ°Ð²Ð»ÐµÐ½Ð¸Ðµ ÑÑÑÑÐ¾Ð¹ÑÑÐ²Ð¾Ð¼.',
    step3a: 'Ð ÑÐ°Ð·Ð´ÐµÐ»Ðµ âDeveloper Appâ Ð²ÑÐ±ÐµÑÐ¸ÑÐµ',
    step3b: 'Ð¸ Ð½Ð°Ð¶Ð¼Ð¸ÑÐµ âÐÐ¾Ð²ÐµÑÑÑÑâ â âÐÐ¾Ð´ÑÐ²ÐµÑÐ´Ð¸ÑÑâ.',
    step4: 'ÐÐµÑÐ½Ð¸ÑÐµÑÑ Ð½Ð° Ð³Ð»Ð°Ð²Ð½ÑÐ¹ ÑÐºÑÐ°Ð½ Ð¸ Ð¾ÑÐºÑÐ¾Ð¹ÑÐµ Ð¿ÑÐ¸Ð»Ð¾Ð¶ÐµÐ½Ð¸Ðµ.',
    copyDev: 'Ð¡ÐºÐ¾Ð¿Ð¸ÑÐ¾Ð²Ð°ÑÑ Ð¸Ð¼Ñ ÑÐ°Ð·ÑÐ°Ð±Ð¾ÑÑÐ¸ÐºÐ°',
    tryOpenApp: 'ÐÐ¾Ð¿ÑÐ¾Ð±Ð¾Ð²Ð°ÑÑ Ð¾ÑÐºÑÑÑÑ Ð¿ÑÐ¸Ð»Ð¾Ð¶ÐµÐ½Ð¸Ðµ',
    close: 'ÐÐ°ÐºÑÑÑÑ',
    trustOnce: '*ÐÐ¾Ð´ÑÐ²ÐµÑÐ´Ð¸ÑÑ ÑÐ°Ð·ÑÐ°Ð±Ð¾ÑÑÐ¸ÐºÐ° Ð½ÑÐ¶Ð½Ð¾ Ð»Ð¸ÑÑ Ð¾Ð´Ð¸Ð½ ÑÐ°Ð·.',
    enterpriseDev: 'ÐÐ¾ÑÐ¿Ð¾ÑÐ°ÑÐ¸Ð²Ð½ÑÐ¹ ÑÐ°Ð·ÑÐ°Ð±Ð¾ÑÑÐ¸Ðº',
    path16: 'ÐÐ°ÑÑÑÐ¾Ð¹ÐºÐ¸ â ÐÑÐ½Ð¾Ð²Ð½ÑÐµ â VPN Ð¸ ÑÐ¿ÑÐ°Ð²Ð»ÐµÐ½Ð¸Ðµ ÑÑÑÑÐ¾Ð¹ÑÑÐ²Ð¾Ð¼ â Developer App â ÐÐ¾Ð²ÐµÑÑÑÑ',
    path14: 'ÐÐ°ÑÑÑÐ¾Ð¹ÐºÐ¸ â ÐÑÐ½Ð¾Ð²Ð½ÑÐµ â ÐÑÐ¾ÑÐ¸Ð»Ð¸ Ð¸ ÑÐ¿ÑÐ°Ð²Ð»ÐµÐ½Ð¸Ðµ ÑÑÑÑÐ¾Ð¹ÑÑÐ²Ð¾Ð¼ â Developer App â ÐÐ¾Ð²ÐµÑÑÑÑ',
    pathOld: 'ÐÐ°ÑÑÑÐ¾Ð¹ÐºÐ¸ â ÐÑÐ½Ð¾Ð²Ð½ÑÐµ â Ð£Ð¿ÑÐ°Ð²Ð»ÐµÐ½Ð¸Ðµ ÑÑÑÑÐ¾Ð¹ÑÑÐ²Ð¾Ð¼ / ÐÑÐ¾ÑÐ¸Ð»Ð¸ â Developer App â ÐÐ¾Ð²ÐµÑÑÑÑ',
    detected: 'ÐÐ±Ð½Ð°ÑÑÐ¶ÐµÐ½Ð° iOS',
    language: 'Ð¯Ð·ÑÐº',
  },
  vi: {
    download: 'Táº£i xuá»ng',
    version: 'PhiÃªn báº£n',
    versionLabel: 'PhiÃªn báº£n',
    sizeLabel: 'Dung lÆ°á»£ng',
    platform: 'Ná»n táº£ng',
    androidApk: 'Android',
    androidNone: 'Android (khÃ´ng cÃ³)',
    iosIpa: 'iOS',
    iosNone: 'iOS (khÃ´ng cÃ³)',
    androidDownload: 'Táº£i cho Android',
    iosInstall: 'CÃ i trÃªn iOS',
    noFiles: 'ChÆ°a cÃ³ tá»p nÃ o Äá» táº£i xuá»ng.',
    tip: 'Máº¹o: Láº§n Äáº§u cÃ i á»©ng dá»¥ng doanh nghiá»p, vÃ o CÃ i Äáº·t â CÃ i Äáº·t chung â VPN & Quáº£n lÃ½ thiáº¿t bá» / Há» sÆ¡ & Quáº£n lÃ½ thiáº¿t bá» Äá» tin cáº­y nhÃ  phÃ¡t triá»n.',
    iosGuideTitle: 'BÆ°á»c tiáº¿p theo: kÃ­ch hoáº¡t á»©ng dá»¥ng doanh nghiá»p',
    iosGuideDetecting: 'Äang xÃ¡c Äá»nh phiÃªn báº£n iOSâ¦',
    step1: 'Sau khi cÃ i Äáº·t, chÆ°a má» á»©ng dá»¥ng ngay.',
    step2: 'Má» CÃ i Äáº·t â CÃ i Äáº·t chung â VPN & Quáº£n lÃ½ thiáº¿t bá» / Há» sÆ¡ & Quáº£n lÃ½ thiáº¿t bá».',
    step3a: 'Trong âDeveloper Appâ, chá»n',
    step3b: 'vÃ  nháº¥n âTin cáº­yâ â âXÃ¡c minhâ.',
    step4: 'Quay láº¡i mÃ n hÃ¬nh chÃ­nh vÃ  má» á»©ng dá»¥ng.',
    copyDev: 'Sao chÃ©p tÃªn nhÃ  phÃ¡t triá»n',
    tryOpenApp: 'Thá»­ má» á»©ng dá»¥ng',
    close: 'ÄÃ³ng',
    trustOnce: '*Chá» cáº§n tin cáº­y nhÃ  phÃ¡t triá»n má»t láº§n.',
    enterpriseDev: 'NhÃ  phÃ¡t triá»n doanh nghiá»p',
    path16: 'CÃ i Äáº·t â CÃ i Äáº·t chung â VPN & Quáº£n lÃ½ thiáº¿t bá» â Developer App â Tin cáº­y',
    path14: 'CÃ i Äáº·t â CÃ i Äáº·t chung â Há» sÆ¡ & Quáº£n lÃ½ thiáº¿t bá» â Developer App â Tin cáº­y',
    pathOld: 'CÃ i Äáº·t â CÃ i Äáº·t chung â Quáº£n lÃ½ thiáº¿t bá» / Há» sÆ¡ â Developer App â Tin cáº­y',
    detected: 'ÄÃ£ phÃ¡t hiá»n iOS',
    language: 'NgÃ´n ngá»¯',
  },
};

function renderLangSwitcher(code: string, cur: string) {
  const options: Array<{ v: string; label: string }> = [
    { v: 'en', label: 'English' },
    { v: 'ru', label: 'Ð ÑÑÑÐºÐ¸Ð¹' },
    { v: 'vi', label: 'Tiáº¿ng Viá»t' },
    { v: 'zh-TW', label: 'ç¹é«ä¸­æ' },
    { v: 'zh-CN', label: 'ç®ä½ä¸­æ' },
  ];

  const langLabel = LOCALES[cur]?.language ?? LOCALES['zh-TW'].language ?? 'Language';
  const items = options
    .map((item) => `<option value="${h(item.v)}"${item.v === cur ? ' selected' : ''}>${h(item.label)}</option>`)
    .join('');

  return `
  <label style="display:inline-flex;align-items:center;gap:.5rem">
    <span style="opacity:.75">${h(langLabel)}</span>
    <select id="langSel"
            style="padding:.4rem .6rem;border-radius:10px;background:#0b1222;border:1px solid #334155;color:#e5e7eb">
      ${items}
    </select>
  </label>
  <script>
    (function(){
      var sel = document.getElementById('langSel');
      if(!sel) return;
      sel.addEventListener('change', function(){
        var url = new URL(location.href);
        url.searchParams.set('lang', this.value);
        location.href = url.toString();
      });
    })();
  </script>`;
}

function normLang(value?: string | null) {
  if (!value) return '';
  const s = value.trim();
  if (s === 'zh' || s === 'zh-Hant') return 'zh-TW';
  if (s === 'zh-Hans') return 'zh-CN';
  if (s === 'en-US' || s === 'en-GB') return 'en';
  return ['zh-TW', 'en', 'zh-CN', 'ru', 'vi'].includes(s) ? s : '';
}

function pickBestLang(primary: string, accept: string | null) {
  if (primary) return primary;
  const header = (accept || '').toLowerCase();
  if (/zh\-tw|zh\-hant/.test(header)) return 'zh-TW';
  if (/zh|hans|cn/.test(header)) return 'zh-CN';
  if (/ru/.test(header)) return 'ru';
  if (/vi/.test(header)) return 'vi';
  if (/en/.test(header)) return 'en';
  return 'zh-TW';
}

function htmlLang(value: string) {
  if (value === 'zh-CN') return 'zh-Hans';
  if (value === 'zh-TW') return 'zh-Hant';
  return value;
}

function resp404(message: string) {
  return new Response(message || 'Not Found', {
    status: 404,
    headers: { 'cache-control': 'no-store' },
  });
}

function h(input: unknown) {
  return String(input ?? '').replace(/[&<>"']/g, (match) => {
    switch (match) {
      case '&':
        return '&amp;';
      case '<':
        return '&lt;';
      case '>':
        return '&gt;';
      case '"':
        return '&quot;';
      default:
        return '&#39;';
    }
  });
}

function attr(input: unknown) {
  return h(input).replace(/"/g, '&quot;');
}
